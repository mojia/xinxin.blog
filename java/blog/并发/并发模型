并发系统可以采用不同的并发模型来实现，同时并发模型强调的是系统中的线程是如何协作来完成一个任务的。线程的通信，协作有不同的方式

首先我们来看jdk自带的concurrent包下面的并发模型
1：线程池并发模型
Delegator-------|Worker0
				|Worker1
				|Worker2
				|WorkerN
将一个大的事情，切分成一些小的可分的任务，每个任务交给一个Worker去执行。最经典的范例就是Web容器，或者RPC Server的设计。一般都是来一个请求分配一个独立的线程是处理。这种模型能应对一般企业的并发需求。
但是缺点也是明显的：
（1）一些场景下，Worker之间不是绝对独立的，而是会共享一些竞争性资源的。这些竞争性资源可能是一些共享数据，或者某个队列，或者数据库连接池。当由于这些共享资源的竞争问题出现的时候，线程池并发模型吞吐量就会有下降。
（2）因为有竞争资源的问题，导致线程池并发模型变得复杂。Worker中间有时会共享一些状态变量，如果一个Worker更新了它所在cpu核的L1缓存变量，并且该变量没有同步到内存中，这个时候别的Worker看到的状态变量的数据就不一致，这个地方会引发并发模型复杂度上升。
（3）任务完成的顺序无法预测。一堆的Worker在池子里，你无法提前知道哪个先完成，哪个后完成。

2：流水线并发模型
Delegator------->Worker0------>Worker1------->Worker2
该模型类似于流水线工场里的流水线模式，每个Worker完成一个完整工作的一部分，当该Woker完成后，就把job交给后面的Worker。每个Worker只在自己的线程空间中完成自己的工作，同时每个Worker之间不共享状态。所以该模型也叫无状态并发模型。该模型常用于响应式系统，事件驱动模型。
所以演化的模型如下：



